var thinky = require('../index').thinky;
var Users = thinky_model();
Users.ensureIndex("created_at")
var l = require('gp-logger')

module.exports = {
	get_all: function(callback) {
		Users.orderBy({index: "created_at"})
		.run()
		.then(function(result) {
        	l.log(JSON.stringify(result));
        	if (callback) callback(result)
    	})
    	.error(function(err) {
    		l.log_error("An error occurred when getting from Users table: " + err)
    	});
	},

	get: function(user_id, callback) {
		Users.get(user_id).then(function(user) {
	        if (callback) callback(user)
		});
	},

	add: function(user, callback) {
		var u = new Users(user);
		u.save(function(error, result) {
			if (error) {
				l.log_error("error when inserting")
			}
			else {
				l.log("Insert successful");
				if (callback) callback(response)
			}
		});
	},

	delete: function(user_id, callback) {
		Users.get(user_id).then(function(user) {
		    user.delete().then(function(result) {
		        if (callback) callback(result)
		    });
		});
	},

	subscribe: function(callback) {
		Users.changes().then(function(feed) {
		  feed.each(function(error, doc) {
		    if (error) {
		      l.log_error(error);
		    }

		    if (doc.isSaved() === false) {
		      l.log("The following document was deleted:");
		      l.log(JSON.stringify(doc));
		    }
		    else if (doc.getOldValue() == null) {
		      l.log("A new document was inserted:");
		      l.log(JSON.stringify(doc));
		    }
		    else {
		      l.log("A document was updated.");
		      l.log("Old value:");
		      l.log(JSON.stringify(doc.getOldValue()));
		      l.log("New value:");
		      l.log(JSON.stringify(doc));
		    }

		    callback();
		  });
		}).error(function(error) {
		  l.log_error(error);
		});
	},
	Model: function() {
		return thinky_model();
	}
}

function thinky_model() {
	return thinky.createModel('users', user_model(thinky.type, thinky.r));
}

function user_model(type, r) {
	return {
	    id: type.string(),
	    forename: type.string(),
	    surname: type.string(),
	    created_at: type.date().default(r.now())
	}
}